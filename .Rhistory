for(i in seq(0,0.9,0.1)){
s[i+1]=var(aux$data[which(aux$time > i & aux$time < i+0.1)])
}
s
s=double()
for(i in seq(0,0.9,0.1)){
s[i+1]=var(aux$data[which(aux$time > i & aux$time < i+0.1)])
}
s
for(i in seq(0,0.9,0.1)){
s[10*i+1]=var(aux$data[which(aux$time > i & aux$time < i+0.1)])
}
s
s=double()
n=double()
for(i in seq(0,0.9,0.1)){
s[10*i+1]=var(aux$data[which(aux$time > i & aux$time < i+0.1)])
n[10*i+1]=which(aux$time > i & aux$time < i+0.1)
}
n
for(i in seq(0,0.9,0.1)){
s[10*i+1]=var(aux$data[which(aux$time > i & aux$time < i+0.1)])
n[10*i+1]=length(which(aux$time > i & aux$time < i+0.1))
}
n
sum(n)
for(i in seq(0,0.9,0.1)){
s[10*i+1]=var(aux$data[which(aux$time > i & aux$time < i+0.1)])
n[10*i+1]=length(which(aux$time >= i & aux$time < i+0.1))
}
for(i in seq(0,0.9,0.1)){
s[10*i+1]=var(aux$data[which(aux$time >= i & aux$time < i+0.1)])
n[10*i+1]=length(which(aux$time >= i & aux$time < i+0.1))
}
n
sum(n)
s_sample=sum((n-1)*s)/(sum(n)-M)
s_sample=sum((n-1)*s)/(sum(n)-10)
s_sample
theta=s_sample^2/var(df$data)^2
theta
samples_stat=function(df, P=3.9){
Per=86400*P
phi=(df$time)/P-trunc((df$time)/P)
aux=data.frame(time=phi, data=df$data, error=df$error)
s=double()
n=double()
for(i in seq(0,0.9,0.1)){
s[10*i+1]=var(aux$data[which(aux$time >= i & aux$time < i+0.1)])
n[10*i+1]=length(which(aux$time >= i & aux$time < i+0.1))
}
s_sample=sum((n-1)*s)/(sum(n)-10)
return(s_sample^2/var(df$data)^2)
}
samples_stat(df, P)
samples_stat(df, P=4)
samples_stat(df, P=3.5)
samples_stat(df, P=3.9064)
result=double()
result=double()
j=0
for(i in seq(3.5,4.5,0.1)){
j=j+1
result[j]= samples_stat(df, P=i)
}
result
for(i in seq(3.5,4.5,0.01)){
j=j+1
result[j]= samples_stat(df, P=i)
}
result
plot(seq(3.5,4.5,0.01), result)
plot(seq(3.5,4.5,0.01), result[-3])
length(result)
length(seq(3.5,4.5,0.01))
result=double()
j=0
for(i in seq(3.5,4.5,0.01)){
j=j+1
result[j]= samples_stat(df, P=i)
}
result
i=3.5
samples_stat(df, P=i)
length(result)
plot(seq(3.5,4.5,0.01), result[-3])
plot(seq(3.5,4.5,0.01), result)
result=double()
j=0
for(i in seq(3.5,4.5,0.001)){
j=j+1
result[j]= samples_stat(df, P=i)
}
plot(seq(3.5,4.5,0.01), result)
length(result)
plot(seq(3.5,4.5,0.001), result)
require(ggplot2);
data(tips);
p0 = qplot(sex, data = tips, geom = 'bar');
p1 = p0 + scale_x_discrete(labels = c('Female' = expression(alpha),
'Male'   = expression(beta)));
print(p1);
expression(alpha)
expression(alpha)
ggplot(aux, aes(x=time, y=data))+
geom_point()+
xlab(expression(alpha))
ggplot(stat_results, aes(x=period, y=theta))+
geom_point()+
geom_line()+
ylab(expression(theta))
stat_results=data.frame(period=seq(3.5,4.5,0.001),  theta=result)
ggplot(stat_results, aes(x=period, y=theta))+
geom_point()+
geom_line()+
ylab(expression(theta))
ggplot(stat_results, aes(x=period, y=theta))+
geom_line()+
ylab(expression(theta))
result=double()
j=0
for(i in seq(1,5,0.001)){
j=j+1
result[j]= samples_stat(df, P=i)
}
stat_results=data.frame(period=seq(3.5,4.5,0.001),  theta=result)
stat_results=data.frame(period=seq(1,5,0.001),  theta=result)
ggplot(stat_results, aes(x=period, y=theta))+
geom_line()+
ylab(expression(theta))
stat_results[which(stat_results$theta=min(stat_results$theta))]
stat_results[which(stat_results$theta=min(stat_results$theta)),]
stat_results[which(stat_results$theta==min(stat_results$theta)),]
min(stat_results$theta)
stat_results[which(stat_results$theta==min(na.omit(stat_results$theta)),]
stat_results[which(stat_results$theta==min(na.omit(stat_results$theta))),]
minim_period=stat_results$period[which(stat_results$theta==min(na.omit(stat_results$theta))),]
minim_period=stat_results$period[which(stat_results$theta==min(na.omit(stat_results$theta)))]
minim_period
View(df)
samples_stat=function(df, P=3.9){
Per=86400*P
phi=(df$time)/Per-trunc((df$time)/Per)
aux=data.frame(time=phi, data=df$data, error=df$error)
s=double()
n=double()
for(i in seq(0,0.9,0.1)){
s[10*i+1]=var(aux$data[which(aux$time >= i & aux$time < i+0.1)])
n[10*i+1]=length(which(aux$time >= i & aux$time < i+0.1))
}
s_sample=sum((n-1)*s)/(sum(n)-10)
return(s_sample^2/var(df$data)^2)
}
result=double()
j=0
for(i in seq(1,5,0.1)){
j=j+1
result[j]= samples_stat(df, P=i)
}
result
stat_results=data.frame(period=seq(1,5,0.001),  theta=result)
stat_results=data.frame(period=seq(1,5,0.1),  theta=result)
minim_period=stat_results$period[which(stat_results$theta==min(na.omit(stat_results$theta)))]
minim_period
ggplot(stat_results, aes(x=period, y=theta))+
geom_line()+
ylab(expression(theta))
periods_prova=seq(1,5,0.001)
samples_stat=function(df, P=3.9){
Per=86400*P
phi=(df$time)/Per-trunc((df$time)/Per)
aux=data.frame(time=phi, data=df$data, error=df$error)
s=double()
n=double()
j=0
for(i in seq(0,0.9,0.1)){
j=j+1
s[j]=var(aux$data[which(aux$time >= i & aux$time < i+0.1)])
n[j]=length(which(aux$time >= i & aux$time < i+0.1))
}
s_sample=sum((n-1)*s)/(sum(n)-10)
return(s_sample^2/var(df$data)^2)
}
result=double()
periods_prova=seq(1,5,0.001)
j=0
for(i in periods_prova){
j=j+1
result[j]= samples_stat(df, P=i)
}
stat_results=data.frame(period=periods_prova,  theta=result)
minim_period=stat_results$period[which(stat_results$theta==min(na.omit(stat_results$theta)))]
minim_period
Per=86400*minim_period
phi=(df$time)/Per-trunc((df$time)/Per)
aux=data.frame(time=phi, data=df$data, error=df$error)
stat_results=data.frame(period=periods_prova,  theta=result)
stat_results
ggplot(stat_results, aes(x=period, y=theta))+
geom_line()+
ylab(expression(theta))
b_per=data.frame(time=phi, data=df$data)
ggplot(b_per, aes(x=time, y=data, ymin=data-error, ymax=data+error))+
geom_point()+
geom_errorbar()
b_per=data.frame(time=phi, data=df$data, error=df$error)
ggplot(b_per, aes(x=time, y=data, ymin=data-error, ymax=data+error))+
geom_point()+
geom_errorbar()
ggplot(b_per, aes(x=time, y=data, ymin=data-error, ymax=data+error))+
geom_point()+
geom_smooth()+
geom_errorbar()
ggplot(stat_results, aes(x=period, y=theta))+
geom_line()+
ylab(expression(theta))
minim_period
minim_stat=min(na.omit(stat_results$theta))
minim_stat
ggplot(b_per, aes(x=time, y=data, ymin=data-error, ymax=data+error))+
geom_point()+
geom_smooth()+
geom_errorbar()
View(df)
View(b_per)
View(df)
View(b_per)
result=double()
periods_prova=seq(1,5,0.0001)
j=0
for(i in periods_prova){
j=j+1
result[j]= samples_stat(df, P=i)
}
stat_results=data.frame(period=periods_prova,  theta=result)
minim_period=stat_results$period[which(stat_results$theta==min(na.omit(stat_results$theta)))]
minim_stat=min(na.omit(stat_results$theta))
Per=86400*minim_period
phi=(df$time)/Per-trunc((df$time)/Per)
b_per=data.frame(time=phi, data=df$data, error=df$error)
ggplot(stat_results, aes(x=period, y=theta))+
geom_line()+
ylab(expression(theta))
ggplot(b_per, aes(x=time, y=data, ymin=data-error, ymax=data+error))+
geom_point()+
geom_smooth()+
geom_errorbar()
minim_period
View(stat_results)
result=double()
periods_prova=seq(3,6,0.001)
j=0
for(i in periods_prova){
j=j+1
result[j]= samples_stat(df, P=i)
}
stat_results=data.frame(period=periods_prova,  theta=result)
minim_period=stat_results$period[which(stat_results$theta==min(na.omit(stat_results$theta)))]
minim_stat=min(na.omit(stat_results$theta))
Per=86400*minim_period
phi=(df$time)/Per-trunc((df$time)/Per)
b_per=data.frame(time=phi, data=df$data, error=df$error)
#Plot Stat
ggplot(stat_results, aes(x=period, y=theta))+
geom_line()+
ylab(expression(theta))
#Plot Best Period
?annotate()
ggplot(b_per, aes(x=time, y=data, ymin=data-error, ymax=data+error))+
geom_point()+
geom_smooth()+
annotate("text", x=c(minim_period, 2*minim_period), y=c(0.1,0.1), label=c("Period", "Period and half"))
geom_errorbar()
ggplot(b_per, aes(x=time, y=data, ymin=data-error, ymax=data+error))+
geom_point()+
geom_smooth()+
annotate("text", x=c(minim_period, 2*minim_period), y=c(0,0), label=c("Period", "Period and half"))+
geom_errorbar()
ggplot(stat_results, aes(x=period, y=theta))+
geom_line()+
annotate("text", x=c(minim_period, 2*minim_period), y=c(0,0), label=c("Period", "Period and half"))+
ylab(expression(theta))
ggplot(stat_results, aes(x=period, y=theta))+
geom_line()+
annotate("text", x=c(minim_period, 1.5*minim_period), y=c(0,0), label=c("Period", "Period and half"))+
ylab(expression(theta))
#### STYLE ####
metri_style = theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
axis.title.x = element_text("HersheySans",
size = 26,
vjust=0.1),
axis.title.y = element_text("HersheySans",
size = 26,
vjust=1.5),
axis.text.x = element_text(size= 16,
angle = 45,
face = 'bold',
vjust = 1,
hjust=1),
axis.text.y = element_text(size= 16,
face = 'bold',
vjust = 0.5,
hjust=1),
plot.title = element_text(hjust = 0),
legend.text = element_text("HersheySans",
size=15)) +
theme(plot.title = element_text("HersheySans",
size=50)
)
ggplot(stat_results, aes(x=period, y=theta))+
geom_line()+
annotate("text", x=c(minim_period, 1.5*minim_period), y=c(0,0), label=c("Period", "Period and half"))+
ylab(expression(theta))+
metri_style
# libraries ####
require(reshape)
require(ggplot2)
require(gtable)
require(lattice)
require(gridExtra)
require(grid)
require(dplyr)
require(scales)
require(grDevices)
require(treemap)
require(data.tree)
require(stringr)
library(RColorBrewer)
library(reshape2)
ggplot(stat_results, aes(x=period, y=theta))+
geom_line()+
annotate("text", x=c(minim_period, 1.5*minim_period), y=c(0,0), label=c("Period", "Period and half"))+
ylab(expression(theta))+
metri_style
ggplot(b_per, aes(x=time, y=data, ymin=data-error, ymax=data+error))+
geom_point()+
geom_smooth()+
geom_errorbar()+
metri_style
log(b_per$data)
ggplot(b_per, aes(x=time, y=log(data), ymin=data-error, ymax=data+error))+
geom_point()+
geom_smooth()+
geom_errorbar()+
metri_style
ggplot(b_per, aes(x=time, y=data/mean(data), ymin=data-error, ymax=data+error))+
geom_point()+
geom_smooth()+
geom_errorbar()+
metri_style
ggplot(b_per, aes(x=time, y=data/mean(data), ymin=data-error, ymax=data+error))+
geom_point()+
geom_smooth()+
geom_errorbar()+
xlab("Phase")+
ylab("Energy")
metri_style
ggplot(b_per, aes(x=time, y=data/mean(data), ymin=data-error, ymax=data+error))+
geom_point()+
geom_smooth()+
geom_errorbar()+
xlab("Phase")+
ylab("Energy")+
metri_style
ggplot(b_per, aes(x=100*time, y=data/mean(data), ymin=data-error, ymax=data+error))+
geom_point()+
geom_smooth()+
geom_errorbar()+
xlab("Phase")+ylab("Energy")+metri_style
ggplot(b_per, aes(x=100*time, y=data/mean(data), ymin=(data-error)/mean(data), ymax=(data+error)/mean(data)))+
geom_point()+
geom_smooth()+
geom_errorbar()+
xlab("Phase")+ylab("Energy")+metri_style
ggplot(stat_results, aes(x=period, y=theta))+
geom_line()+
annotate("text", x=c(minim_period, 1.5*minim_period), y=c(0,0), label=c("Period", "Period and half"))+
ylab(expression(theta))
ggplot(stat_results, aes(x=period, y=theta))+
geom_line()+
geom_smooth()+
annotate("text", x=c(minim_period, 1.5*minim_period), y=c(0,0), label=c("Period", "Period and half"))+
ylab(expression(theta))
?geom_smooth()
ggplot(b_per, aes(x=100*time, y=data/mean(data), ymin=(data-error)/mean(data), ymax=(data+error)/mean(data)))+
geom_point()+
geom_smooth(se=var(b_per$data))+
geom_errorbar()+
xlab("Phase")+ylab("Energy")+metri_style
#### STYLE ####
metri_style = theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
axis.title.x = element_text(size = 26,
vjust=0.1),
axis.title.y = element_text(size = 26,
vjust=1.5),
axis.text.x = element_text(size= 16,
angle = 45,
face = 'bold',
vjust = 1,
hjust=1),
axis.text.y = element_text(size= 16,
face = 'bold',
vjust = 0.5,
hjust=1),
plot.title = element_text(hjust = 0),
legend.text = element_text(size=15)) +
theme(plot.title = element_text(size=50)
)
ggplot(stat_results, aes(x=period, y=theta))+
geom_line()+
geom_smooth()+
annotate("text", x=c(minim_period, 1.5*minim_period), y=c(0,0), label=c("Period", "Period and half"))+
ylab(expression(theta))+metri_style
ggplot(stat_results, aes(x=period, y=theta))+
geom_line()+
#  annotate("text", x=c(minim_period, 1.5*minim_period), y=c(0,0), label=c("Period", "Period and half"))+
ylab(expression(theta))+metri_style
rm(HESS_LS5039)
Read data
df=read.delim("C:/Users/Tornero/Documents/Uni/TFGFisica/HESS_LS5039.dat", header = FALSE, sep= "")
names(df)=c("time", "data", "error")
#today=57817 05/03/2017
ggplot(df, aes(x=time, y=data))+
geom_point()+
geom_smooth()+
geom_errorbar(data=df, aes(x=time, ymin=data-error, ymax=data+error))+
metri_style
#### Style ####
metri_style = theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
axis.title.x = element_text(size = 26,
vjust=0.1),
axis.title.y = element_text(size = 26,
vjust=1.5),
axis.text.x = element_text(size= 16,
angle = 45,
face = 'bold',
vjust = 1,
hjust=1),
axis.text.y = element_text(size= 16,
face = 'bold',
vjust = 0.5,
hjust=1),
plot.title = element_text(hjust = 0),
legend.text = element_text(size=15)) +
theme(plot.title = element_text(size=50)
)
ggplot(df, aes(x=time, y=data))+
geom_point()+
geom_smooth()+
geom_errorbar(data=df, aes(x=time, ymin=data-error, ymax=data+error))+
metri_style
#time conversion
t1=min(df$time)
df$time=df$time-t1
df$time=df$time*86400
DF
df
#Statistic Definition
samples_stat=function(df, P=3.9){
Per=86400*P
phi=(df$time)/Per-trunc((df$time)/Per)
aux=data.frame(time=phi, data=df$data)
s=double()
n=double()
j=0
for(i in seq(0,0.9,0.1)){
j=j+1
s[j]=var(aux$data[which(aux$time >= i & aux$time < i+0.1)])
n[j]=length(which(aux$time >= i & aux$time < i+0.1))
}
s_sample=sum((n-1)*s)/(sum(n)-10)
return(s_sample^2/var(df$data)^2)
}
result=double()
periods_prova=seq(3,8,0.01)
j=0
for(i in periods_prova){
j=j+1
result[j]= samples_stat(df, P=i)
}
#Statistic Results
stat_results=data.frame(period=periods_prova, theta=result)
minim_period=stat_results$period[which(stat_results$theta==min(na.omit(stat_results$theta)))]
minim_stat=min(na.omit(stat_results$theta))
#Best period
Per=86400*minim_period
phi=(df$time)/Per-trunc((df$time)/Per)
b_per=data.frame(time=phi, data=df$data, error=df$error)
minim_period
ggplot(stat_results, aes(x=period, y=theta))+
geom_line()+
#  annotate("text", x=c(minim_period, 1.5*minim_period), y=c(0,0), label=c("Period", "Period and half"))+
ylab(expression(theta))+metri_style
ggplot(b_per, aes(x=100*time, y=data/mean(data), ymin=(data-error)/mean(data), ymax=(data+error)/mean(data)))+
geom_point()+
geom_smooth(se=var(b_per$data))+
geom_errorbar()+
xlab("Phase")+ylab("Energy")+metri_style
save.image("~/Uni/TFGFisica/Results.RData")
readRDS("Results.rds")
setwd("~/R/Scripts/diccionario")
rsconnect::deployApp()
rsconnect::deployApp()
